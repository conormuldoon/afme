## Copyright:   Copyright (c) 1996-2006 The Agent Factory Working Group. All rights reserved.
## Licence:     This file is free software; you can redistribute it and/or modify
##              it under the terms of the GNU Lesser General Public License as published by
##              the Free Software Foundation; either version 2.1, or (at your option)
##              any later version.
##
##              This file is distributed in the hope that it will be useful,
##              but WITHOUT ANY WARRANTY; without even the implied warranty of
##              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##              GNU Lesser General Public License for more details.
##
##              You should have received a copy of the GNU Lesser General Public License
##              along with Agent Factory Micro Edition; see the file COPYING.  If not, write to
##              the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
##              Boston, MA 02111-1307, USA.
##
##				Author: Conor Muldoon
	public void emigrate(AgentName name){
        StringBuffer buffer=new StringBuffer();
        name.appendName(buffer);
        String n=buffer.toString();
        
        agents.remove(n);
        Integer i=(Integer)agentIndex.get(n);
        list.delete(i.intValue());
        agentIndex.remove(n);
        
        scheduler.remove(name);
        Enumeration e=services.elements();
        while(e.hasMoreElements())
            ((Service)e.nextElement()).modifyBinding(name,null);
        
        
    }
    
    public void writeAgent(Object key,java.io.DataOutputStream dos)throws IOException{
    	scheduler.writeAgent(key,dos);
    }
    
    public void writeRes(Object key,java.io.DataOutputStream dos)throws IOException{
    	scheduler.writeOut(key,dos);
    }
    
    
    
    public void createAgent(DataInputStream dis)throws java.io.IOException{
        
        
        AgentName name=new AgentName(dis.readUTF(),"<<project>>");
        
        int numPerceptors=dis.readInt();
        Perceptor[]perceptors=new Perceptor[numPerceptors];
        Hashtable actuators=new Hashtable();
        Hashtable modules=new Hashtable();
        final int SIZE=8;
        int terSize=0;
        TerImplication[]terArray=new TerImplication[SIZE];
        
        try{
            
            // role file
            for(int j=dis.readInt();j-->0;){
                
                DataInputStream input=new DataInputStream(
                        getClass().getResourceAsStream("/"+dis.readUTF()));
                
                byte[]b=new byte[input.available()];
                input.read(b);
                String s=new String(b);
                String roleLine=null;
                
                do{
                    int index=s.indexOf("\n");
                    if(index==-1){
                        roleLine=s.trim();
                        if(roleLine.equals(""))break;
                        s=null;
                    }else{
                        roleLine=s.substring(0,index).trim();
                        s=s.substring(index+1, s.length());
                        if(roleLine.equals(""))continue;
                    }
                    
                    String token=roleLine.substring(0,roleLine.indexOf(' '));
                    if(token.equals("ACTUATOR")||
                            token.equals("PERCEPTOR")||
                            token.equals("LOAD_MODULE")||
                            token.startsWith("/*")||
                            token.startsWith("//"))continue;
                    
                    if(terSize==terArray.length){
                        TerImplication[]newArray=new TerImplication[terSize+SIZE];
                        System.arraycopy(terArray,0,newArray,0,terSize);
                        terArray=newArray;
                    }
                    
                    terArray[terSize]=new TerImplication(roleLine);
                    terSize++;
                }while(s!=null);
            }
            
            
            int numRules=dis.readInt();
            if((terArray.length-terSize)!=numRules){
                TerImplication[]newArray=new TerImplication[terSize+numRules];
                System.arraycopy(terArray,0,newArray,0,terSize);
                terArray=newArray;
            }
            
            for(int i=numRules+terSize;i-->terSize;)
                terArray[i]=new TerImplication(dis.readUTF()+";");
            
        }catch(MalformedLogicException e){
            e.printStackTrace();
        }
        
        RoleLibrary roleLib=new RoleLibrary();
        
        Agent agent=new Agent(terArray,actuators,perceptors,roleLib);
        
        
        
        
        PerceptionManager perManager=new PerceptionManager(agent,name,modules,services,scheduler);
        try{
            
            for(int i=numPerceptors;i-->0;){
                String string=dis.readUTF();
                Class p=Class.forName(string);
                PerceptorFactory percep=(PerceptorFactory)p.newInstance();
                perceptors[i]=percep.createPerceptor(perManager);
            }
            
            AffectManager affManager=new AffectManager(agent,name,modules,services,scheduler,roleLib);
            
            for(int i=dis.readInt();i-->0;){
                String string=dis.readUTF();
                
                Class a=Class.forName(string);
                ActuatorFactory actFact=(ActuatorFactory)a.newInstance();
                Actuator act=actFact.createActuator(affManager);
                act.register(actuators);
            }
            
            for(int i=dis.readInt();i-->0;){
                
                if(dis.readUTF().equals("interface")){
                    String string=dis.readUTF();
                    
                    Class m=Class.forName(string);
                    GUIFactory guiFact=(GUIFactory)m.newInstance();
                    Module module=guiFact.createGUI(name,let,list);
                    module.register(modules);
                    inter=(UserInterface)module;
                    continue;
                }
                Class m=Class.forName(dis.readUTF());
                ModuleFactory modFact=(ModuleFactory)m.newInstance();
                Module module=modFact.createModule(name);
                module.register(modules);
            }
        }catch(ClassNotFoundException e){
            e.printStackTrace();
        } catch(InstantiationException e){
            e.printStackTrace();
        }catch(IllegalAccessException e){
            e.printStackTrace();
        }
        
        for(int j=dis.readInt();j-->0;){
            try{
                String st=dis.readUTF();
                agent.addFOSBelief(FOS.createFOS(st));
            }catch(MalformedLogicException e){
                e.printStackTrace();
            }
        }
        
        StringBuffer buffer=new StringBuffer();
        name.appendName(buffer);
        String s=buffer.toString();
        
        agentIndex.put(s,new Integer(list.append(s,null)));
        MIDletRunnable runnable=new MIDletRunnable(agent,let,terArray,roleLib,list);
        runnable.start();
        
        agents.put(s,agent);
        Enumeration e=services.elements();
        
        while(e.hasMoreElements())
            ((Service)e.nextElement()).modifyBinding(null, name);
        
        int numTemplates=dis.readInt();
        for(int i=numTemplates;i-->0;){
            try{
                int numRule=dis.readInt();
                TerImplication[]rule=new TerImplication[numRule];
                for(int j=numRule;j-->0;)
                    rule[j]=new TerImplication(dis.readUTF());
                int numTrig=dis.readInt();
                FOS[]trigger=new FOS[numTrig];
                for(int j=numTrig;j-->0;)
                    trigger[j]=FOS.createFOS(dis.readUTF());
                FOS id=FOS.createFOS(dis.readUTF());
                roleLib.add(id,new RoleTemplate(rule,id,trigger));
                    
            }catch(MalformedLogicException exception){
                exception.printStackTrace();
            }

        }
        scheduler.schedule(name,runnable,dis.readInt());
        
        
    }