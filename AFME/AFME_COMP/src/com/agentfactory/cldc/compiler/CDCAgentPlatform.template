// Copyright:   Copyright (c) 1996-2006 The Agent Factory Working Group. All rights reserved.
// Licence:     This file is free software; you can redistribute it and/or modify
//              it under the terms of the GNU Lesser General Public License as published by
//              the Free Software Foundation; either version 2.1, or (at your option)
//              any later version.
//
//              This file is distributed in the hope that it will be useful,
//              but WITHOUT ANY WARRANTY; without even the implied warranty of
//              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//              GNU Lesser General Public License for more details.
//
//              You should have received a copy of the GNU Lesser General Public License
//              along with Agent Factory Micro Edition; see the file COPYING.  If not, write to
//              the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
//              Boston, MA 02111-1307, USA.
//
//				Author: Conor Muldoon

$=/*  =$name$=AgentPlatform.java  */

// Generated by the Agent Factory Micro Edition (AFME) compiler.

package =$ pack $=;
import com.agentfactory.cldc.logic.FOS;

import com.agentfactory.cldc.logic.RoleLibrary;
import com.agentfactory.cldc.logic.RoleTemplate;
import com.agentfactory.cldc.logic.BelSeq;
import com.agentfactory.cldc.BasicRunnable;
import java.util.Hashtable;
import com.agentfactory.cldc.AgentName;


import com.agentfactory.cldc.UserInterface;
import com.agentfactory.cldc.scheduler.AgentRunnable;

import com.agentfactory.cldc.PerceptionManager;
import com.agentfactory.cldc.AffectManager;
import com.agentfactory.cldc.Perceptor;
import com.agentfactory.cldc.scheduler.Scheduler;
import com.agentfactory.cldc.logic.TerImplication;
import com.agentfactory.cldc.logic.Agent; 
import com.agentfactory.cldc.Platform;

import java.io.File;
import java.io.RandomAccessFile;
import java.io.IOException;
import com.agentfactory.cldc.mts.IDSet;

public class =$ name $=AgentPlatform implements Platform{
    
    
    
  
	public static void main(String[]args){
		new =$ name $=AgentPlatform(args);
	}
  
  

	public =$ name $=AgentPlatform(String[]a) {
		
    	=$  agents{ $=AgentRunnable =$ agtname $=;
    	AgentName =$ agtname $=Name;=$ } $=
    	

        
        Scheduler scheduler=new Scheduler(=$ numt $=);
        
      
        Hashtable services = new Hashtable();
        
        Hashtable agents=new Hashtable();

       
       
       =$ agents{ 
       agtname $=Name=new AgentName("=$ agtname $=",null);
       =$ agtname $===$ namerole $=(=$ agtname $=Name,=$ resources $=,scheduler,services);
       =$ agtname $=Name.addToTable(agents,=$agtname$=); =$ } 
       $=
       

       =$  bels{
       believer $=.addFOSBelief(FOS.createFOS("=$ bel $="));
       =$ } $=
       
       =$  starters{
       agtname$=.start();=$ } $=
       
       //String[]stringNames=new String[=$ numagts $=];
       =$ agents{
       //agtname$=Name.addName(stringNames,=$lcount$=);
       //=$ 
       } $=
            

        final AgentName agentName[]=new AgentName[=$numagts$=];
        =$  agents{
        $=agentName[=$lcount$=]==$agtname$=Name;
        
        =$ } $=
        
       
        //Service service;
        String[] args;
        =$
         services{
    $=
    	args=new String[=$numargs$=];=$
  	args{
        		$=
        args[=$lcount$=]="=$arg$=";=$
        	}
$=
		new =$classname$=(args,agentName,scheduler,this).register(services);
        =$ }
         
         $=
        
       
     	
        =$  agents{
        	$=scheduler.schedule(=$agtname$=Name,=$agtname$=,=$responsetime$=);
        =$ } $=
		scheduler.start();
		
		int n=a.length;
		for(int i=0;i<n;i=i+2){
    	   =$  agents{$=
    	   if(a[i].equals("=$agtname$=")){
    	       =$agtname$=.addFOSBelief(FOS.createFOS(a[i+1]));
    	    	continue;
    	    }
        	=$ } $=
        }
    }
  

  
    
   
    
    =$designs{$=private static BasicRunnable =$namerole$=(AgentName name,int res,Scheduler scheduler,Hashtable services){
        
        Perceptor[]perceptor=new Perceptor[=$ numper $=];
        Hashtable actuator=new Hashtable();
        RoleLibrary roleLib=new RoleLibrary();
        BelSeq[] arr=null;
        
        boolean[] bool=null;
        =$  roles{
            $=TerImplication[]rule=new TerImplication[=$ numrules $=];
        =$  rules{$=
        		arr=new BelSeq[=$belNum$=];
        		bool=new boolean[=$belNum$=];
        		=$
        		depends{$=
        			arr[=$lcount$=]==$label$=;
        			bool[=$lcount$=]==$boolval$=;
        		=$
        		}
            	$=rule[=$lcount$=]=new TerImplication("=$rr$=",new BelSeq("=$rl$=",arr,bool));
        =$ } $=
        FOS[]trigger=new FOS[=$numtriggers$=];
        =$  triggers{
        	$=trigger[=$lcount$=]=FOS.createFOS("=$trig$=");
        =$ } $=
        FOS id=FOS.createFOS("=$id$=");
        roleLib.add(id,new RoleTemplate(rule,id,trigger));
        =$ } $=

        Hashtable modules=new Hashtable();
        
        
        =$ modules{
         	$=new =$ classname $=(name).register(modules);
         =$ } $=
        
        
        =$ intermod{ classname $= interMod=new =$ classname $=(name,let,list,scheduler);
        interMod.register(modules);
        inter=interMod;
        =$ } $=
        
		=$ sequences{ $=
        arr=new BelSeq[=$belNum$=];
        bool=new boolean[=$belNum$=];
        =$ depends{$=
        arr[=$lcount$=]==$label$=;
        bool[=$lcount$=]==$boolval$=;
        =$}
        $=BelSeq =$ label $==new BelSeq("=$rl$=",arr,bool);
        =$ } $=
        
        TerImplication[]mentalState=new TerImplication[=$ numrules $=];
        =$  rules{$=arr=new BelSeq[=$belNum$=];
        bool=new boolean[=$belNum$=];
        =$depends{$=
        arr[=$lcount$=]==$label$=;
        bool[=$lcount$=]==$boolval$=;
        =$}
        $=mentalState[=$lcount$=]=new TerImplication("=$rr$=",new BelSeq("=$rl$=",arr,bool));
        =$ } $=
        
        Agent agent=new Agent(mentalState,actuator,perceptor,modules,roleLib,res);
        PerceptionManager perManager=new PerceptionManager(agent,name,modules,services,scheduler);
        AffectManager affManager=new AffectManager(agent,name,modules,services,scheduler,roleLib);
        =$ perceptors{
        	$=perceptor[=$lcount$=]=new =$ classname $=(perManager);
        =$ } $=
        =$ actuators{
        	$=new =$classname$=(affManager).register(actuator);
        =$ } $=
         return new BasicRunnable(agent);
    } 

    =$ } 
    
    $=
    public void display(){
    
    }
    
     public void saveID(String sb){
     
     }
    
    public void addIDs(Object name,IDSet ids){
    
    }
    
    
    public String newStore(String s){
    	String identifier=null;
    	
		try {
			File f=new File("=$ name $="+s+".afme");
			if(f.exists()){
				RandomAccessFile raf = new RandomAccessFile(f, "rw");
				identifier=raf.readUTF();
				raf.close();
			}
			else f.createNewFile();
		} catch (IOException e) {
				e.printStackTrace();
		}
		return identifier;
    }
    
    public void addData(String identifier,String s){
    	try {
			File f=new File("=$ name $="+s+".afme");
			RandomAccessFile raf = new RandomAccessFile(f, "rw");
			raf.seek(f.length());
			raf.writeUTF(identifier);
			raf.close();
			
		} catch(IOException e){
			e.printStackTrace();
		}
    }
    
    public void storeName(FOS name){
    	try {
			
			File f=new File("=$ name $=NameStore.afme");
			if(!f.exists())f.createNewFile();
			RandomAccessFile raf = new RandomAccessFile(f, "rw");
			raf.seek(f.length());
			raf.writeUTF(name.toString());
			
		} catch (IOException e) {
			e.printStackTrace();
		}
    
    }

}=$
