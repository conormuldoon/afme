// Copyright:   Copyright (c) 1996-2006 The Agent Factory Working Group. All rights reserved.
// Licence:     This file is free software; you can redistribute it and/or modify
//              it under the terms of the GNU Lesser General Public License as published by
//              the Free Software Foundation; either version 2.1, or (at your option)
//              any later version.
//
//              This file is distributed in the hope that it will be useful,
//              but WITHOUT ANY WARRANTY; without even the implied warranty of
//              MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//              GNU Lesser General Public License for more details.
//
//              You should have received a copy of the GNU Lesser General Public License
//              along with Agent Factory Micro Edition; see the file COPYING.  If not, write to
//              the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
//              Boston, MA 02111-1307, USA.
//
//				Author: Conor Muldoon

$=/*  =$name$=AgentPlatform.java  */

// Generated by the Agent Factory Micro Edition (AFME) compiler.

package =$ pack $=;
import com.agentfactory.cldc.logic.FOS;
import com.agentfactory.cldc.logic.RoleLibrary;
import com.agentfactory.cldc.logic.RoleTemplate;
import com.agentfactory.cldc.logic.BelSeq;
import java.util.Hashtable;
import com.agentfactory.cldc.AgentName;

import com.agentfactory.cldc.UserInterface;
import com.agentfactory.cldc.BasicRunnable;
import com.agentfactory.cldc.scheduler.AgentRunnable;

import com.agentfactory.cldc.PerceptionManager;
import com.agentfactory.cldc.AffectManager;
import com.agentfactory.cldc.Perceptor;
import com.agentfactory.cldc.scheduler.Scheduler;
import com.agentfactory.cldc.logic.TerImplication;
import com.agentfactory.cldc.logic.Agent; 

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import com.agentfactory.cldc.Platform;
import java.io.IOException;

import com.agentfactory.cldc.mts.IDSet;
import com.agentfactory.cldc.mts.AID;



public class =$ name $=AgentPlatform implements Platform{
    
    
    
    Scheduler scheduler;
    UserInterface inter;
    Hashtable services;
    =$name$=let let;
    Hashtable agents;


   Hashtable agentIndex;

    public =$ name $=AgentPlatform(=$name$=let let) {
    
    	=$  agents{ $=AgentRunnable =$ agtname $=;
    	AgentName =$ agtname $=Name;=$ } $=
    	
                this.let=let;
        
        scheduler=new Scheduler(1);
       
        
        services = new Hashtable();
        
        agents=new Hashtable();

       agentIndex=new Hashtable();
       
       =$ agents{ 
       agtname $=Name=createName("=$ agtname $=");
       =$ agtname $===$ namerole $=(=$ agtname $=Name,=$ resources $=);
       =$ agtname $=Name.addToTable(agents,=$agtname$=); =$ } 
       $=
       

       =$  bels{
       believer $=.addFOSBelief(FOS.createFOS("=$ bel $="));
       =$ } $=
       
       =$  starters{
       agtname$=.start();=$ } $=
       
       String[]stringNames=new String[=$ numagts $=];
       =$ agents{
       agtname$=Name.addName(stringNames,=$lcount$=);
       =$ } $=

        final AgentName agentName[]=new AgentName[=$numagts$=];
        =$  agents{
        $=agentName[=$lcount$=]==$agtname$=Name;
        =$ } $=
        
       
        //Service service;
        String[] args=null;
        =$
         services{
    $=
    	args=new String[=$numargs$=];=$
  	args{
        		$=
        args[=$lcount$=]="=$arg$=";=$
        	}
$=
		new =$classname$=(args,agentName,scheduler,this).register(services);
        =$ }
         
         $=
        
        =$gui{ 
        classname$= interService = new =$ classname $=(args,agentName,let,null);
        interService.register(services);
        inter=interService;
        =$}$=
     	
        =$  agents{
        	$=scheduler.schedule(=$agtname$=Name,=$agtname$=,=$responsetime$=);
        =$ } $=

        
    }
    
    public AgentName createName(String agentName){
      
        return new AgentName(agentName,"=$ name $=");
    }
	
	// Start the Scheduler
    public void start(){
        scheduler.start();
    }
    
    /* Pause the Scheduler. 
       Used for asynchronous events, such as received phone calls. */
    public void pause(){
        scheduler.pause();
    }
    
    // Terminate the Scheduler
    public void destroy(){
        scheduler.destroy();
        java.util.Enumeration en=services.elements();
        while(en.hasMoreElements()){
        	((com.agentfactory.cldc.Service)en.nextElement()).destroy();
        }
    }
    
    public void display(){
       
   }
    
    public void displayApp(){
        if(inter!=null)inter.display();
    }
    
    =$  
    
    
    designs{$=private BasicRunnable =$namerole$=(AgentName name,int res){
        
        Perceptor[]perceptor=new Perceptor[=$ numper $=];
        Hashtable actuator=new Hashtable();
        RoleLibrary roleLib=new RoleLibrary();
        BelSeq[] arr=null;
        
        boolean[] bool=null;
        =$  roles{
            $=TerImplication[]rule=new TerImplication[=$ numrules $=];
        =$  rules{$=
        		arr=new BelSeq[=$belNum$=];
        		bool=new boolean[=$belNum$=];
        		=$
        		depends{$=
        			arr[=$lcount$=]==$label$=;
        			bool[=$lcount$=]==$boolval$=;
        		=$
        		}
            	$=rule[=$lcount$=]=new TerImplication("=$rr$=",new BelSeq("=$rl$=",arr,bool));
        =$ } $=
        FOS[]trigger=new FOS[=$numtriggers$=];
        =$  triggers{
        	$=trigger[=$lcount$=]=FOS.createFOS("=$trig$=");
        =$ } $=
        FOS id=FOS.createFOS("=$id$=");
        roleLib.add(id,new RoleTemplate(rule,id,trigger));
        =$ } $=

        Hashtable modules=new Hashtable();

         =$ modules{
         	$=new =$ classname $=(name).register(modules);
         =$ } $=
        
        =$ intermod{ classname $= interMod=new =$ classname $=(name,let,null,scheduler);
        interMod.register(modules);
        inter=interMod;
        =$ } $=
        
		=$ sequences{ $=
        arr=new BelSeq[=$belNum$=];
        bool=new boolean[=$belNum$=];
        =$ depends{$=
        arr[=$lcount$=]==$label$=;
        bool[=$lcount$=]==$boolval$=;
        =$}
        $=BelSeq =$ label $==new BelSeq("=$rl$=",arr,bool);
        =$ } $=
        
        
        
        TerImplication[]mentalState=new TerImplication[=$ numrules $=];
        =$  rules{$=arr=new BelSeq[=$belNum$=];
        bool=new boolean[=$belNum$=];
        =$depends{$=
        arr[=$lcount$=]==$label$=;
        bool[=$lcount$=]==$boolval$=;
        =$}
        $=mentalState[=$lcount$=]=new TerImplication("=$rr$=",new BelSeq("=$rl$=",arr,bool));
        =$ } $=
        
        Agent agent=new Agent(mentalState,actuator,perceptor,modules,roleLib,res);
        PerceptionManager perManager=new PerceptionManager(agent,name,modules,services,scheduler);
        AffectManager affManager=new AffectManager(agent,name,modules,services,scheduler,roleLib);
        =$ perceptors{
        	$=perceptor[=$lcount$=]=new =$ classname $=(perManager);
        =$ } $=
        =$ actuators{
        	$=new =$classname$=(affManager).register(actuator);
        =$ } $=
        
        
        =$ initcomm{
        	$=BelSeq.createCommit(agent,FOS.createFOS("=$commit$="));
        =$
        }$=
        
        return new BasicRunnable(agent);
    } 

    =$ } 
    
    $=
    
    public String newStore(String s){
    	System.err.println("Record store not supported in emulator");
		return null;
    }
    
    public void addData(String identifier,String s){

    	System.err.println("Record store not supported in emulator");
    }
    
      public void saveID(String sb){
     
    	  System.err.println("Record store not supported in emulator");
     }
    
    public void addIDs(Object name,IDSet ident){
    	System.err.println("Record store not supported in emulator");
    }
    
    public void storeName(FOS name){
    	System.err.println("Record store not supported in emulator");
    }


}=$
